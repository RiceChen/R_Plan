/****************************************************************************************
* @file map.txt
*
* @brief This file is the map file (gnuarm or armgcc).
*
* Copyright (C) RivieraWaves 2009-2015
*
****************************************************************************************
*/

/* configure the CPU type */
OUTPUT_ARCH(arm)
/* link with the standard c library */
INPUT(-lc)
/* link with the standard GCC library */
INPUT(-lgcc)
/* configure the entry point */
ENTRY(vectors)

MEMORY
{
    program_memory (rx) : ORIGIN = 0xF0000000, LENGTH = 640K
    data_memory (!rx) :   ORIGIN = 0xF00A0000, LENGTH = 64K
}

/* configure the stack sizes */
stack_len_fiq = 0x10;
stack_len_irq = 0x400;
stack_len_svc = 0x2000;
stack_len_unused = 0x10;

SECTIONS
{
    EXEC_RAM_TEXT 0xF0000000 :
    {
        code_base = .;
        /* the address 0 must contain the boot vectors */
        *boot_vectors.o(.text)
        /* immediately followed by the boot handlers */
        *boot_handlers.o(.text)
        *(.text)
        *(.rodata)
        code_end = .;
    } > program_memory

    LIBC_DATA :
    {
        libc_base = .;
        *(.data.impure*)
        *(.data._impure*)
        . = libc_base + 0x1400;
        libc_end = .;
    } > data_memory
    
    /* Data section */
    RAM_DATA :
    {
        data_base = .;
        *(.data)
        data_end = .;
    } > data_memory

    /* BSS section */
    RAM_BSS :
    {
        bss_base = .;
        *(.bss)
        *(COMMON)
        bss_end = .;
    } > data_memory
    bss_length = bss_end - bss_base;

    /* Unloaded RAM section */
    RAM_UNLOADED :
    {
       . = ALIGN(0x4);
        unloaded_area_start = .;
       . = . + (1*4);
        unloaded_area_start_end = .;
    } > data_memory

    /* UNUSED STACK */
    RAM_STACK_UNUSED :
    {
       . = ALIGN(0x1000);
        stack_base_unused = .;
        . += stack_len_unused;
    } > data_memory

    /* SVC STACK */
    RAM_STACK_SVC :
    {
        . = ALIGN(0x4);
        stack_base_svc = .;
        . += stack_len_svc;
    } > data_memory

    /* IRQ STACK */
    RAM_STACK_IRQ :
    {
        . = ALIGN(0x4);
        stack_base_irq = .;
        . += stack_len_irq;
    } > data_memory

    /* FIQ STACK */
    RAM_STACK_FIQ :
    {
        . = ALIGN(0x4);
        stack_base_fiq = .;
        . += stack_len_fiq;
    } > data_memory
    
}

